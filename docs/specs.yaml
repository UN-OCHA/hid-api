swagger: '2.0'
info:
  title: 'Humanitarian ID v2'
  description: 'Humanitarian ID v2 API'
  version: 2.0.0
  contact:
    name: 'Guillaume Viguier-Just'
    email: 'guillaume@viguierjust.com'
  license:
    name: ''
tags:
  - name: 'user'
    description: 'User related operations'
  - name: 'auth'
    description: 'Authentication related methods'
  - name: 'list'
    description: 'List related methods'
host: 'api2.dev.humanitarian.id'
basePath: '/api/v2'
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
definitions:
  Auth:
    properties:
      email:
        type: string
      password:
        type: string
        format: password
  User:
    type: object
    properties:
      _id:
        type: string
        description: 'User unique ID'
      deleted:
        type: boolean
        description: 'Whether the user is active or not'
      email:
        type: string
        description: 'The user primary email'
      email_verified:
        type: string
        description: 'Whether the user primary email is verified'
      emailsVisibility:
        type: string
        description: 'Who can view this user emails'
      expires:
        type: string
        format: date-time
        description: 'When this user account expires (set to the past if it does not)'
      family_name:
        type: string
        description: 'The user family name'
      given_name:
        type: string
        description: 'The user given name'
      id:
        type: string
        description: 'Shortcut to the user ID'
      isManager:
        type: boolean
        description: 'Whether the user is a global manager'
      is_admin:
        type: boolean
        description: 'Whether the user is an admin'
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  Translation:
    type: object
    properties:
      text:
        type: string
      language:
        type: string
  List:
    type: object
    properties:
      _id:
        type: string
        description: 'List unique ID'
      name:
        type: string
      names:
        type: array
        items:
          $ref: '#/definitions/Translation'
      acronym:
        type: string
      acronyms:
        type: array
        description: 'List acronym translations'
        items:
          $ref: '#/definitions/Translation'
      label:
        type: string
      labels:
        type: array
        description: 'List label translations'
        items:
          $ref: '#/definitions/Translation'
      type:
        type: string
        description: 'List type'
        enum:
          - 'operation'
          - 'bundle'
          - 'disaster'
          - 'list'
          - 'organization'
          - 'functional_role'
          - 'office'
      visibility:
        type: string
        description: 'Defines who can view a list'
        enum:
          - 'me'
          - 'inlist'
          - 'all'
          - 'verified'
      joinability:
        type: string
        description: 'Who can join a list'
        enum:
          - 'public'
          - 'moderated'
          - 'private'
      remote_id:
        type: integer
        description: 'Id of the list in humanitarianresponse.info'
      legacyId:
        type: string
        description: 'Id of the list in HID v1'
      owner:
        type: schema
        description: 'Creator of the list'
        $ref: '#/definitions/User'
      managers:
        type: array
        description: 'Managers of the list'
        items:
          $ref: '#/definitions/User'
      metadata:
        type: object
        description: 'Metadata of the list pulled from Humanitarianresponse.info'
      deleted:
        type: boolean
paths:
  /user:
    get:
      tags:
        - user
      summary: 'Returns all users the current user has access to'
      parameters:
        - name: 'sort'
          description: 'An attribute to sort by'
          in: 'query'
          type: string
          default: 'name'
        - name: 'offset'
          description: 'Number of users to offset'
          in: 'query'
          type: integer
          default: 0
        - name: 'limit'
          description: 'Maximum number of users to return'
          in: 'query'
          type: integer
          default: 50
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'A list of users'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          headers:
            X-Total-Count:
              description: 'Total number of users'
              type: integer
    post:
      tags:
        - user
      summary: 'Create a new user'
      responses:
        '200':
          description: 'User was successfully created'
          schema:
            $ref: '#/definitions/User'
  /user/{userId}:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    get:
      tags:
        - user
      summary: 'Get the user with userId'
      responses:
        '200':
          description: 'The user object'
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
        - user
      summary: 'Update the user'
      responses:
        '200':
          description: 'The updated user object'
          schema:
            $ref: '#/definitions/User'
    delete:
      tags:
        - user
      summary: 'Delete the user'
      responses:
        '200':
          description: 'The deleted user'
          schema:
            $ref: '#/definitions/User'
  /list:
    get:
      tags:
        - list
      summary: 'Returns all lists the current user has access to'
      parameters:
        - name: 'sort'
          description: 'An attribute to sort by'
          in: 'query'
          type: string
          default: 'name'
        - name: 'offset'
          description: 'Number of lists to offset'
          in: 'query'
          type: integer
          default: 0
        - name: 'limit'
          description: 'Maximum number of lists to return'
          in: 'query'
          type: integer
          default: 50
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'A list of lists'
          schema:
            type: array
            items:
              $ref: '#/definitions/List'
          headers:
            X-Total-Count:
              description: 'Total number of lists'
              type: integer
  /list/{listId}:
    parameters:
      - name: 'listId'
        description: 'Id of the list'
        in: 'path'
        type: string
        required: true
    get:
      tags:
        - list
      summary: 'Get the list with listId'
      responses:
        '200':
          description: 'The list object'
          schema:
            $ref: '#/definitions/List'
    put:
      tags:
        - list
      summary: 'Update the list'
      responses:
        '200':
          description: 'The updated list object'
          schema:
            $ref: '#/definitions/List'
    delete:
      tags:
        - list
      summary: 'Delete the list'
      description: 'Only custom contact lists can be deleted'
      responses:
        '200':
          description: 'The deleted list'
          schema:
            $ref: '#/definitions/List'
  /jsonwebtoken:
      post:
        tags:
          - auth
        summary: 'Retrieve a jsonwebtoken'
        parameters:
          - name: 'body'
            description: 'User email'
            in: body
            required: true
            schema:
              $ref: '#/definitions/Auth'
        responses:
          '200':
            description: 'The json web token'
          '400':
            description: 'Bad request. Missing email and/or password'
          '401':
            description: 'Wrong email and/or password'
