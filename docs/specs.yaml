swagger: '2.0'
info:
  title: 'Humanitarian ID v2'
  description: 'Humanitarian ID v2 API'
  version: 2.0.0
  contact:
    name: 'UN OCHA'
    email: 'ops@reliefweb.int'
  license:
    name: ''
tags:
  - name: 'user'
    description: 'User related operations'
  - name: 'auth'
    description: 'Authentication related methods'
  - name: 'list'
    description: 'List related methods'
  - name: 'connection'
    description: 'Methods related to user connections'
  - name: 'service'
    description: 'Methods related to services (mailchimp, googlegroup)'
  - name: 'client'
    description: 'Methods related to oauth clients'
  - name: 'notification'
    description: 'Methods related to notifications'
  - name: 'totp'
    description: 'Methods related to 2 Factor Authentication'
host: 'stage.api-humanitarian-id.ahconu.org'
basePath: '/api/v2'
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
definitions:
  Auth:
    properties:
      email:
        type: string
      password:
        type: string
        format: password
  Client:
    properties:
      name:
        type: string
  Notification:
    properties:
      name:
        type: string
  User:
    type: object
    properties:
      _id:
        type: string
        description: 'User unique ID'
      deleted:
        type: boolean
        description: 'Whether the user is active or not'
      email:
        type: string
        description: 'The user primary email'
      email_verified:
        type: string
        description: 'Whether the user primary email is verified'
      emailsVisibility:
        type: string
        description: 'Who can view this user emails'
      expires:
        type: string
        format: date-time
        description: 'When this user account expires (set to the past if it does not)'
      family_name:
        type: string
        description: 'The user family name'
      given_name:
        type: string
        description: 'The user given name'
      id:
        type: string
        description: 'Shortcut to the user ID'
      isManager:
        type: boolean
        description: 'Whether the user is a global manager'
      is_admin:
        type: boolean
        description: 'Whether the user is an admin'
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  Translation:
    type: object
    properties:
      text:
        type: string
      language:
        type: string
  List:
    type: object
    properties:
      _id:
        type: string
        description: 'List unique ID'
      name:
        type: string
      names:
        type: array
        items:
          $ref: '#/definitions/Translation'
      acronym:
        type: string
      acronyms:
        type: array
        description: 'List acronym translations'
        items:
          $ref: '#/definitions/Translation'
      label:
        type: string
      labels:
        type: array
        description: 'List label translations'
        items:
          $ref: '#/definitions/Translation'
      type:
        type: string
        description: 'List type'
        enum:
          - 'operation'
          - 'bundle'
          - 'disaster'
          - 'list'
          - 'organization'
          - 'functional_role'
          - 'office'
      visibility:
        type: string
        description: 'Defines who can view a list'
        enum:
          - 'me'
          - 'inlist'
          - 'all'
          - 'verified'
      joinability:
        type: string
        description: 'Who can join a list'
        enum:
          - 'public'
          - 'moderated'
          - 'private'
      remote_id:
        type: integer
        description: 'Id of the list in humanitarianresponse.info'
      legacyId:
        type: string
        description: 'Id of the list in HID v1'
      owner:
        type: schema
        description: 'Creator of the list'
        $ref: '#/definitions/User'
      managers:
        type: array
        description: 'Managers of the list'
        items:
          $ref: '#/definitions/User'
      metadata:
        type: object
        description: 'Metadata of the list pulled from Humanitarianresponse.info'
      deleted:
        type: boolean
paths:
  /user:
    get:
      tags:
        - user
      summary: 'Returns all users the current user has access to'
      parameters:
        - name: 'sort'
          description: 'An attribute to sort by'
          in: 'query'
          type: string
          default: 'name'
        - name: 'offset'
          description: 'Number of users to offset'
          in: 'query'
          type: integer
          default: 0
        - name: 'limit'
          description: 'Maximum number of users to return'
          in: 'query'
          type: integer
          default: 50
        - name: 'fields'
          description: 'Fields to be returned (leave empty to return all)'
          type: string
          default: ''
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'A list of users'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          headers:
            X-Total-Count:
              description: 'Total number of users'
              type: integer
        '401':
          description: 'Unauthorized.'
        '500':
          description: 'Unexpected error.'
    post:
      tags:
        - user
      summary: 'Create a new user'
      responses:
        '200':
          description: 'User was successfully created'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Bad request. Missing one required parameter'
        '403':
          description: 'Forbidden. Your account is not allowed to create users.'
        '500':
          description: 'Unexpected error.'
  /user/{userId}:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    get:
      tags:
        - user
      summary: 'Get the user with userId'
      responses:
        '200':
          description: 'The user object'
          schema:
            $ref: '#/definitions/User'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'User can not be found'
        '500':
          description: 'Unexpected error.'
    put:
      tags:
        - user
      summary: 'Update the user'
      responses:
        '200':
          description: 'The updated user object'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden. Your account is not allowed to update this user.'
        '404':
          description: 'User can not be found.'
        '500':
          description: 'Unexpected error.'
    delete:
      tags:
        - user
      summary: 'Delete the user'
      responses:
        '204':
          description: 'Successful response'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden. Your account is not allowed to delete this user.'
        '404':
          description: 'User not found'
        '500':
          description: 'Unexpected error'
  /user/{userId}/notification:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    post:
      tags:
        - user
      summary: 'Notifies a user that his contact information needs to be updated'
      responses:
        '200':
          description: 'Notification was sent successfully'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'User not found'
        '500':
          description: 'Unexpected error'
  /user/{userId}/orphan:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    put:
      tags:
        - user
      summary: 'Sends a claim email to an orphan user'
      responses:
        '202':
          description: 'Claim email sent successfully'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden. Your account is not allowed to do this.'
        '404':
          description: 'User not found'
        '500':
          description: 'Unexpected error'
  /user/{userId}/picture:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    post:
      tags:
        - user
      summary: 'Updates a user picture'
      responses:
        '200':
          description: 'Picture was updated successfully'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden. Your account is not allowed to update this user.'
        '404':
          description: 'User can not be found.'
        '500':
          description: 'Unexpected error.'
  /user/{userId}/emails:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    post:
      tags:
        - user
      summary: 'Adds an email address to a user'
      responses:
        '200':
          description: 'Email was added successfully'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden. Your account is not allowed to update this user.'
        '404':
          description: 'User can not be found.'
        '500':
          description: 'Unexpected error.'
  /user/{userId}/email:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    put:
      tags:
        - user
      summary: 'Sets the primary email of a user'
      responses:
        '200':
          description: 'Primary email was set successfully'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden. Your account is not allowed to update this user.'
        '404':
          description: 'User can not be found.'
        '500':
          description: 'Unexpected error.'
  /user/emails/{email}:
    parameters:
      - name: 'email'
        description: 'Email to validate'
        in: 'path'
        type: string
    put:
      tags:
        - user
      summary: 'Sends a validation email or validates an email address'
      responses:
        '200':
          description: 'Primary email was set successfully'
        '404':
          description: 'Email can not be found in the database'
        '500':
          description: 'Unexpected error.'
  /user/{userId}/emails/{email}:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
      - name: 'email'
        description: 'Email to be removed'
        in: 'path'
        type: string
        required: true
    delete:
      tags:
        - user
      summary: 'Remove an email address'
      responses:
        '200':
          description: 'Email address was removed successfully'
  /user/{userId}/phone_numbers:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    post:
      tags:
        - user
      summary: 'Adds a phone number to a user'
      responses:
        '200':
          description: 'Phone number was added successfully'
  /user/{userId}/phone_numbers/{pid}:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
      - name: 'pid'
        description: 'Id of the phone number'
        in: 'path'
        type: string
        required: true
    delete:
      tags:
        - user
      summary: 'Deletes a phone number'
      responses:
        '200':
          description: 'Phone number was successfully deleted'
  /user/{userId}/phone_number:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    put:
      tags:
        - user
      summary: 'Sets the primary phone number of a user'
      responses:
        '200':
          description: 'Primary phone number was set successfully'
  /user/{userId}/organization:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    put:
      tags:
        - user
      summary: 'Sets the primary organization of a user'
      responses:
        '200':
          description: 'Primary organization was set successfully'
  /user/{userId}/password:
    put:
      tags:
        - user
      summary: 'Updates the password of a user'
      parameters:
        - name: 'userId'
          description: 'Id of the user'
          in: 'path'
          type: string
          required: true
        - name: 'X-HID-TOTP'
          in: 'header'
          description: 'The TOTP token - Required if the user has TOTP activated'
          required: false
          type: string
        - name: 'body'
          description: 'Provide the current password of the user and the new one'
          in: body
          required: true
          schema:
            type: object
            properties:
              old_password:
                type: string
              new_password:
                type: string
      responses:
        '204':
          description: 'Password was updated successfully'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Unauthorized'
        '404':
          description: 'User can not be found.'
        '500':
          description: 'Unexpected error.'
  /user/password:
    put:
      tags:
        - user
      summary: 'Resets a user password or sends a password reset email'
      parameters:
        - name: 'X-HID-TOTP'
          in: 'header'
          description: 'The TOTP token - Required to reset the password if the user has TOTP activated'
          required: false
          type: string
        - name: 'body'
          description: 'Send an email and an app_reset_url to this method to have it send an email with a password
          recovery email. Send a hash with a password to this method to have it reset the password.'
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              app_reset_url:
                type: string
              password:
                type: string
                format: password
              hash:
                type: string
      responses:
        '200':
          description: 'Password was reset succesfully'
        '202':
          description: 'Password reset email was sent successfully'
  /user/{userId}/connections:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    post:
      tags:
        - connection
      summary: 'Adds a connection to a user'
      responses:
        '200':
          description: 'Connection was added successfully. It is now pending.'
  /user/{userId}/connections/{cid}:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
      - name: 'cid'
        description: 'Id of the connection'
        in: 'path'
        type: string
        required: true
    put:
      tags:
        - connection
      summary: 'Sets a connection to pending=false'
      responses:
        '200':
          description: 'Connection was updated successfully'
    delete:
      tags:
        - connection
      summary: 'Removes a connection'
      responses:
        '200':
          description: 'Connection was removed successfully'
  /user/{userId}/subscriptions:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
    post:
      tags:
        - service
      summary: 'Subscribe to a service'
      responses:
        '200':
          description: 'Subscription was successful'
  /user/{userId}/subscriptions/{sid}:
    parameters:
      - name: 'userId'
        description: 'Id of the user'
        in: 'path'
        type: string
        required: true
      - name: 'sid'
        description: 'Id of the service'
        in: 'path'
        type: string
        required: true
    delete:
      tags:
        - service
      summary: 'Unsubscribe from a service'
      responses:
        '200':
          description: 'Unsbscription was successful'
  /list:
    get:
      tags:
        - list
      summary: 'Returns all lists the current user has access to'
      parameters:
        - name: 'sort'
          description: 'An attribute to sort by'
          in: 'query'
          type: string
          default: 'name'
        - name: 'offset'
          description: 'Number of lists to offset'
          in: 'query'
          type: integer
          default: 0
        - name: 'limit'
          description: 'Maximum number of lists to return'
          in: 'query'
          type: integer
          default: 50
        - name: 'fields'
          description: 'Fields to be returned (leave empty to return all)'
          type: string
          default: ''
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'A list of lists'
          schema:
            type: array
            items:
              $ref: '#/definitions/List'
          headers:
            X-Total-Count:
              description: 'Total number of lists'
              type: integer
    post:
      tags:
        - list
      summary: 'Create a list'
      responses:
        '200':
          description: 'List was created successfully'
  /list/{listId}:
    parameters:
      - name: 'listId'
        description: 'Id of the list'
        in: 'path'
        type: string
        required: true
    get:
      tags:
        - list
      summary: 'Get the list with listId'
      responses:
        '200':
          description: 'The list object'
          schema:
            $ref: '#/definitions/List'
    put:
      tags:
        - list
      summary: 'Update the list'
      responses:
        '200':
          description: 'The updated list object'
          schema:
            $ref: '#/definitions/List'
    delete:
      tags:
        - list
      summary: 'Delete the list'
      description: 'Only custom contact lists can be deleted'
      responses:
        '200':
          description: 'The deleted list'
          schema:
            $ref: '#/definitions/List'
  /client:
    get:
      tags:
        - client
      summary: 'Returns all clients the current user has access to'
      parameters:
        - name: 'sort'
          description: 'An attribute to sort by'
          in: 'query'
          type: string
          default: 'name'
        - name: 'offset'
          description: 'Number of lists to offset'
          in: 'query'
          type: integer
          default: 0
        - name: 'limit'
          description: 'Maximum number of lists to return'
          in: 'query'
          type: integer
          default: 50
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'A list of clients'
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
          headers:
            X-Total-Count:
              description: 'Total number of clients'
              type: integer
    post:
      tags:
        - client
      summary: 'Create an OAuth Client'
      responses:
        '200':
          description: 'Client was created successfully'
  /client/{clientId}:
    parameters:
      - name: 'clientId'
        description: 'Id of the client'
        in: 'path'
        type: string
        required: true
    get:
      tags:
        - client
      summary: 'Get the client with clientId'
      responses:
        '200':
          description: 'The client object'
          schema:
            $ref: '#/definitions/Client'
    put:
      tags:
        - client
      summary: 'Update the client'
      responses:
        '200':
          description: 'The updated client object'
          schema:
            $ref: '#/definitions/Client'
    delete:
      tags:
        - client
      summary: 'Delete the client'
      responses:
        '200':
          description: 'The deleted client'
          schema:
            $ref: '#/definitions/Client'
  /notification:
    get:
      tags:
        - notification
      summary: 'Returns all notifications for the current user'
      parameters:
        - name: 'sort'
          description: 'An attribute to sort by'
          in: 'query'
          type: string
          default: 'name'
        - name: 'offset'
          description: 'Number of lists to offset'
          in: 'query'
          type: integer
          default: 0
        - name: 'limit'
          description: 'Maximum number of lists to return'
          in: 'query'
          type: integer
          default: 50
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'A list of notifications'
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
          headers:
            X-Total-Count:
              description: 'Total number of notifications'
              type: integer
    put:
      tags:
        - notification
      summary: 'Mark notifications as read'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'Notifications were successfully updated'
  /notification/{notificationId}:
    parameters:
      - name: 'notificationId'
        description: 'Id of the notification'
        in: 'path'
        type: string
        required: true
    get:
      tags:
        - notification
      summary: 'Get the notification with notificationId'
      responses:
        '200':
          description: 'The notification object'
          schema:
            $ref: '#/definitions/Notification'
    put:
      tags:
        - notification
      summary: 'Mark the notification as read'
      responses:
        '200':
          description: 'Notification was updated successfully'
  /jsonwebtoken:
    post:
      tags:
        - auth
      summary: 'Generate a jsonwebtoken'
      parameters:
        - name: 'body'
          description: 'User email'
          in: body
          required: true
          schema:
            $ref: '#/definitions/Auth'
      responses:
        '200':
          description: 'The JSON web token'
        '400':
          description: 'Bad request. Missing email and/or password'
        '401':
          description: 'Wrong email and/or password'
        '429':
          description: 'The account was locked for 5 minutes because there were more than 5 unsuccessful login attempts within the last 5 minutes'
    get:
      tags:
        - auth
      summary: 'Retrieve the JSON web tokens of the current user'
      responses:
        '200':
          description: 'List of the JWTs of the current user'
    delete:
      tags:
        - auth
      summary: 'Blacklists a JSON web token'
      responses:
        '200':
          description: 'JSON Web Token was successfully blacklisted'
  /totp:
    post:
      tags:
        - totp
      summary: 'Enable TOTP for the current user'
      parameters:
        - name: 'method'
          description: 'TOTP method to use (app or sms)'
          in: body
          required: true
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
        - name: 'X-HID-TOTP'
          in: 'header'
          description: 'The TOTP token'
          required: true
          type: string
      responses:
        '200':
          description: 'TOTP was enabled successfully'
        '400':
          description: 'Bad request. Invalid TOTP method or TOTP is already enabled'
        '401':
          description: 'Missing or invalid TOTP token'
    get:
      tags:
        - totp
      summary: 'Check if a TOTP token is valid'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
        - name: 'X-HID-TOTP'
          in: 'header'
          description: 'The TOTP token'
          required: true
          type: string
      responses:
        '200':
          description: 'The TOTP token is valid'
        '401':
          description: 'Missing or invalid TOTP token'
    delete:
      tags:
        - totp
      summary: 'Disables 2FA for the current user'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
        - name: 'X-HID-TOTP'
          in: 'header'
          description: 'The TOTP token'
          required: true
          type: string
      responses:
        '200':
          description: '2FA was successfully disabled'
        '400':
          description: 'Bad request. TOTP is already disabled for the current user'
        '401':
          description: 'Missing or invalid TOTP token'
  /totp/qrcode:
    post:
      tags:
        - totp
      summary: 'Generate a QRCode for TOTP authentication via an application'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'TOTP qrcode generated successfully'
        '400':
          description: 'Bad request. TOTP is already enabled, and needs to be disabled before generating a QRCode'
        '401':
          description: 'Missing or invalid authorization token'
  /totp/device:
    post:
      tags:
        - totp
      summary: 'Save a device as trusted for 30 days'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
        - name: 'X-HID-TOTP'
          in: 'header'
          description: 'The TOTP token'
          required: true
          type: string
      responses:
        '200':
          description: 'Device was saved successfully. The response should contain a secret which will need to be provided in the x-hid-totp-trust header.'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Missing or invalid authorization token'
    delete:
      tags:
        - totp
      summary: 'Remove saved device'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '204':
          description: 'Device was removed successfully.'
        '400':
          description: 'Bad request.'
        '401':
          description: 'Missing or invalid authorization token'
  /totp/codes:
    post:
      tags:
        - totp
      summary: 'Retrieve backup codes for a user with TOTP enabled'
      parameters:
        - name: 'authorization'
          in: 'header'
          description: 'The JWT'
          required: true
          type: string
      responses:
        '200':
          description: 'Array of 16 backup codes'
        '400':
          description: 'Bad request. TOTP is not enabled for this user.'
        '401':
          description: 'Missing or invalid authorization token'
