openapi: 3.0.3
x-api-id: hid-api
info:
  version: 3.0.0-dev
  title: HID API
  license:
    name: Apache-2.0
servers:
  - url: 'https://dev.api-humanitarian-id.ahconu.org/api/v3'
    description: Dev server. For use by UNOCHA developers.
  - url: 'https://api.humanitarian.id/api/v3'
    description: Production server. For use by HID Integration Partners.
tags:
  - name: auth
    description: Methods related to authentication
  - name: user
    description: Methods related to users
  - name: client
    description: Methods related to oauth clients
  - name: totp
    description: Methods related to 2-factor authentication
components:
  securitySchemes:
    authToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    JWT:
      type: object
      properties:
        token:
          type: string
    User:
      type: object
      properties:
        _id:
          type: string
          description: User unique ID
        id:
          type: string
          description: Shortcut to the user ID
        deleted:
          type: boolean
          description: Whether the user is active or not
        email:
          type: string
          description: The user primary email
        email_verified:
          type: string
          description: Whether the user primary email is verified
        emailsVisibility:
          type: string
          description: Who can view this user emails
        expires:
          type: string
          format: date-time
          description: When this user account expires (set to the past if it does not)
        family_name:
          type: string
          description: The user family name
        given_name:
          type: string
          description: The user given name
        isManager:
          type: boolean
          description: Whether the user is a global manager
        is_admin:
          type: boolean
          description: Whether the user is an admin
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
security:
  - authToken: []
paths:
  /jsonwebtoken:
    post:
      tags:
        - auth
      summary: Generate a JSON web token (JWT)
      parameters:
        - name: X-HID-TOTP
          in: header
          description: The TOTP token. Required if the user has 2FA enabled.
          required: false
          type: string
      requestBody:
        description: User email and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: The User object with the JWT contained in the `token` property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        '400':
          description: Bad request. Missing email and/or password
        '401':
          description: Wrong email and/or password
        '429':
          description: >-
            The account was locked for 5 minutes because there were more than 5
            unsuccessful login attempts within the last 5 minutes
      security: []
    get:
      tags:
        - auth
      summary: Retrieve the JWTs of the current user
      responses:
        '200':
          description: >-
            Array of all JWTs for the current user, including blacklisted
            tokens.
    delete:
      tags:
        - auth
      summary: Blacklists a JWT for the current user
      requestBody:
        description: The token to blacklist.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWT'
      responses:
        '200':
          description: JWT was successfully blacklisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        '400':
          description: Missing token
        '403':
          description: Could not blacklist this token because you did not generate it
  /user:
    post:
      tags:
        - user
      summary: Create a new user
      requestBody:
        description: Required parameters to create a user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: true
                family_name:
                  type: string
                  required: true
                given_name:
                  type: string
                  required: true
                app_verify_url:
                  type: string
                  required: true
                  description: Should correspond to the endpoint you are interacting with.
      responses:
        '200':
          description: User was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Missing required parameters.
        '403':
          description: Forbidden. Your account is not allowed to create users.
      security: []
    get:
      tags:
        - user
      summary: Returns all users the requesting user has access to.
      parameters:
        - name: sort
          description: An attribute to sort by
          in: query
          type: string
          default: name
        - name: offset
          description: Number of users to offset
          in: query
          type: integer
          default: 0
        - name: limit
          description: Maximum number of users to return
          in: query
          type: integer
          default: 50
        - name: fields
          description: Fields to be returned (leave empty to return all)
          type: string
          default: ''
      responses:
        '200':
          description: A list of users
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
          headers:
            X-Total-Count:
              description: Total number of users
              type: integer
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
  '/user/{id}':
    get:
      tags:
        - user
      summary: Returns a User by ID.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
      responses:
        '200':
          description: The requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request.
        '401':
          description: Requesting user lacks permission to view requested user.
        '404':
          description: Requested user not found.
    put:
      tags:
        - user
      summary: Update the user
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
      requestBody:
        description: The user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to update requested user.
        '404':
          description: Requested user not found.
    delete:
      tags:
        - user
      summary: Delete the user.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
        - name: X-HID-TOTP
          in: header
          description: The TOTP token. Required if the user has 2FA enabled.
          required: false
          type: string
      responses:
        '204':
          description: User deleted successfully.
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to delete requested user.
        '404':
          description: Requested user not found.
  '/user/{id}/password':
    put:
      tags:
        - user
      summary: Updates the password of a user.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
        - name: X-HID-TOTP
          in: header
          description: The TOTP token. Required if the user has 2FA enabled.
          required: false
          type: string
      requestBody:
        description: >-
          The `new_password` must be different than `old_password` and meet ALL
          of the following requirements: at least 12 characters, one lowercase
          letter, one uppercase letter, one number, one special character
          ``!@#$%^&*()+=\`{}``
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  required: true
                new_password:
                  type: string
                  required: true
      responses:
        '204':
          description: Password updated successfully.
        '400':
          description: Bad request. Reason will be in response body.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to update requested user.
        '404':
          description: Requested user not found.
  '/user/{id}/organization':
    put:
      tags:
        - user
      summary: Set primary organization of the user.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
      requestBody:
        description: Organization to be marked primary.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  required: true
      responses:
        '200':
          description: The updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. See response body for details.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to update requested user.
        '404':
          description: Requested user not found.
  '/user/{id}/email':
    put:
      tags:
        - user
      summary: Sets the primary email of a user.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
        - name: X-HID-TOTP
          in: header
          description: The TOTP token. Required if the user has 2FA enabled.
          required: false
          type: string
      requestBody:
        description: Email address to be marked primary.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: true
      responses:
        '200':
          description: The updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to update requested user.
        '404':
          description: Requested user not found.
  '/user/{id}/emails':
    post:
      tags:
        - user
      summary: Add a new email to the user's profile.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
      requestBody:
        description: Email address and validation URL.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: true
                app_validation_url:
                  type: string
                  required: true
                  description: Should correspond to the endpoint you are interacting with.
      responses:
        '200':
          description: The updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Reason will be in response body.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to update requested user.
        '404':
          description: Requested user not found.
  '/user/{id}/emails/{email}':
    delete:
      tags:
        - user
      summary: Remove an email address from the user's profile.
      parameters:
        - name: id
          description: A 24-character alphanumeric User ID
          in: path
          required: true
          default: ''
        - name: email
          description: An email address from the user's profile.
          in: path
          required: true
          default: ''
        - name: X-HID-TOTP
          in: header
          description: The TOTP token. Required if the user has 2FA enabled.
          required: false
          type: string
      responses:
        '200':
          description: The updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Reason will be in response body.
        '401':
          description: Unauthorized.
        '403':
          description: Requesting user lacks permission to update requested user.
        '404':
          description: Requested user not found.
  '/user/emails/{email}':
    put:
      tags:
        - user
      summary: 'Sends confirmation email, or confirms ownership of an email address.'
      parameters:
        - name: email
          description: The email address to confirm.
          in: path
          required: true
          default: ''
      requestBody:
        description: Required parameters to validate an email address.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                app_validation_url:
                  type: string
                  required: true
      responses:
        '204':
          description: Email sent successfully.
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
        '404':
          description: Requested email address not found.
      security: []
  /user/password:
    put:
      tags:
        - user
      summary: Resets a user password or sends a password reset email.
      parameters:
        - name: X-HID-TOTP
          in: header
          description: The TOTP token. Required if the user has 2FA enabled.
          required: false
          type: string
      requestBody:
        description: >-
          Send a payload with `email` and `app_reset_url` to have this method
          send an email with a password recovery email. Send `id`,`time`,`hash`,
          `password` in the payload to have it reset the password. For password
          complexity requirements see `PUT /user/{id}/password`
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: true
                app_reset_url:
                  type: string
                  required: true
                  description: Should correspond to the endpoint you are interacting with.
                id:
                  type: string
                  required: true
                time:
                  type: string
                  required: true
                hash:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '200':
          description: Password reset successfully.
        '400':
          description: Bad request. See response body for details.
      security: []

