<!DOCTYPE html>
<html class="no-js no-cssgrid" lang="en-US" dir="ltr">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Humanitarian ID</title>
    <meta name="description" content="Authentication page for Humanitarian ID">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="/">
    <link rel="stylesheet" href="assets/css/cube.css">
    <link rel="stylesheet" href="assets/css/cd.css">
    <link rel="stylesheet" href="assets/css/cd-button.css">
    <link rel="stylesheet" href="assets/css/main.css">
    <!--[if lt IE 9]>
      <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <script>
      (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
      function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
      e=o.createElement(i);r=o.getElementsByTagName(i)[0];
      e.src='//www.google-analytics.com/analytics.js';
      r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
      ga('create','UA-60189654-2','auto');
      ga('send','pageview');
    </script>
  </head>
  <body>
    <a href="#main-content" class="visually-hidden element-invisible element-focusable" tabindex="-1">
      Skip to main content
    </a>
    <div class="cd-layout-container"><!-- intentionally unclosed! -->
      <header class="cd-header" role="banner">
        <div class="cd-global-header">
          <div class="cd-container cd-global-header__inner">

            <div class="cd-ocha dropdown">
              <div class="cd-global-header__dropdown cd-ocha-dropdown cd-dropdown" id="cd-ocha-dropdown" aria-label="OCHA Services" data-cd-toggable="OCHA Services" data-cd-hidden="true" data-cd-icon="arrow-down" data-cd-logo="ocha-logo" data-cd-component="cd-ocha">
                <div class="cd-ocha-dropdown__inner">
                  <div class="cd-ocha-dropdown__section">
                    <p class="cd-ocha-dropdown__heading" translate>Related Platforms</p>
                    <ul class="cd-ocha-dropdown__list">
                      <li class="cd-ocha-dropdown__link"><a href="https://gms.unocha.org">Grant Management System</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://humanitarianresponse.info">Humanitarian Response</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://hum-insight.info">Humanitarian Insight</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://reliefweb.int">ReliefWeb</a></li>
                    </ul>
                  </div>
                  <div class="cd-ocha-dropdown__section">
                    <p class="cd-ocha-dropdown__heading" translate>Other OCHA Services</p>
                    <ul class="cd-ocha-dropdown__list">
                      <li class="cd-ocha-dropdown__link"><a href="https://fts.unocha.org/">Financial Tracking Service</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://data.humdata.org/">Humanitarian Data Exchange</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://auth.humanitarian.id/">Humanitarian ID</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://humanitarianresponse.info/">Humanitarian Response</a></li>
                    </ul>
                  </div>
                  <div class="cd-ocha-dropdown__section">
                    <p class="cd-ocha-dropdown__heading" aria-hidden="true">&nbsp;</p>
                    <ul class="cd-ocha-dropdown__list">
                      <li class="cd-ocha-dropdown__link"><a href="https://interagencystandingcommittee.org">Inter-Agency Standing Committee</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://unocha.org/">OCHA website</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://reliefweb.int/">ReliefWeb</a></li>
                      <li class="cd-ocha-dropdown__link"><a href="https://vosocc.unocha.org/">Virtual OSOCC</a></li>
                    </ul>
                  </div>
                  <div class="cd-ocha-dropdown__section">
                    <a class="cd-ocha-dropdown__see-all" href="https://www.unocha.org/ocha-digital-services" target="_blank" rel="noopener">See all</a>
                  </div>
                </div>
              </div>
            </div>

            <div class="cd-global-header__actions">
              <div class="cd-global-header__user-menu">
                <h2 class="element-invisible" translate>User menu</h2>

                  <ul class="menu">
                      <% if (locals.user) { %>
                      <li class="cd-user-menu__icon-login cd-user-menu--profile">

                          <ul class="menu cd-global-header__dropdown cd-user-menu__dropdown cd-dropdown" id="cd-user-dropdown" aria-label="My Account" data-cd-toggable="My Account" data-cd-hidden="true" data-cd-icon="arrow-down">

                              <li class="menu-item">
                                <a href="/profile" class="user-profile">Profile</a>
                              </li>
                              <li class="menu-item">
                                <a href="/settings" class="user-settings">Settings</a>
                              </li>
                              <li class="menu-item">
                                <a href="/logout" class="user-logout">Log out</a>
                              </li>
                          </ul>
                      </li>

                      <%} else { %>
                      <!-- anonymous user-login link -->
                        <li class="cd-user-menu__icon-login">
                        <a href="/" class="login-link" translate>Login</a>
                        </li>
                      <% } %>
                  </ul>
              </div>

              <div class="cd-global-header__language-switcher">
                <div class="cd-language-switcher" uib-dropdown keyboard-nav="true">
                  <span class="cd-user-menu__item cd-user-menu__item--small cd-global-header__dropdown-btn t-lang-btn" id="cd-language-toggle">en</span>
                </div>
              </div>

            </div>

          </div>

        </div>

        <div class="cd-site-header">
          <div class="cd-container cd-site-header__inner">
            <h1>
              <a href="/" class="cd-site-logo t-logo-link" style="background: url('/assets/img/logos/hid-logo.svg') center no-repeat; width: 256px;">
                <span class="element-invisible">Humanitarian ID</span>
              </a>
            </h1>
          </div>
        </div>
      </header>

<script>
(function iife() {
  // Remove no-js class from HTML
  document.documentElement.classList.remove('no-js');

  // Feature detection for CSS Grid
  if (window.CSS && window.CSS.supports && window.CSS.supports('display','grid')) {
    document.documentElement.classList.remove('no-cssgrid');
    document.documentElement.classList.add('cssgrid');
  }

  // Initialize toggable dropdown.
  initializeToggables();

  /**
   * Toggle the visibility of a toggable element.
   */
  function toggle(toggler, collapse) {
    var element = toggler.nextElementSibling;
    if (element) {
      var expanded = collapse || toggler.getAttribute('aria-expanded') === 'true';

      // Switch the expanded/collapsed states.
      toggler.setAttribute('aria-expanded', !expanded);
      element.setAttribute('data-cd-hidden', expanded);

      // Switch the labels.
      var labelWrapper = toggler.querySelector('[data-cd-label-switch]');
      if (labelWrapper) {
        var label = labelWrapper.getAttribute('data-cd-label-switch');
        labelWrapper.setAttribute('data-cd-label-switch', labelWrapper.textContent);
        labelWrapper.textContent = label;
      }

      // Change the focus when expanded if a target is specified.
      if (element.hasAttribute('data-cd-focus-target') && !expanded) {
        var target = document.getElementById(element.getAttribute('data-cd-focus-target'));
        if (target) {
          target.focus();
        }
      }
    }
  }

  /**
   * Collapse all toggable elements.
   */
  function collapseAll(exceptions) {
    var elements = document.querySelectorAll('[data-cd-toggler][aria-expanded="true"]');
    exceptions = exceptions || [];

    elements.forEach(function (element) {
      // Elements can be directed to stay open in two ways:
      //  * We can apply an attribute directly in DOM
      //  * We can mark it as an exception when calling this function
      //
      // If neither apply, then close the element.
      if (!element.hasAttribute('data-cd-toggable-keep') && exceptions.indexOf(element) === -1) {
        toggle(element, true);
      }
    });
  }

  /**
   * Get the togglable parents of the toggler element.
   */
  function getToggableParents(element) {
    var elements = [];
    while (element && element !== document) {
      if (element.hasAttribute && element.hasAttribute('data-cd-toggable')) {
        element = element.previousElementSibling;
      }

      // Skip if the there was no previous sibling as that means there is no
      // toggler for the toggable element.
      if (!element) {
        break;
      }

      // Store the toggling button of the togglable parent so that it can
      // be ignored when collapsing the opened toggables.
      if (element.hasAttribute && element.hasAttribute('data-cd-toggler')) {
        elements.push(element);
      }
      element = element.parentNode;
    }
    return elements;
  }

  /**
   * Handle toggling of toggable elements.
   */
  function handleToggle(event) {
    var target = event.currentTarget;
    if (target) {
      collapseAll(getToggableParents(target));
      toggle(target);
    }
    event.preventDefault();
    event.stopPropagation();
  }

  /**
   * Handle togglable element visibility when pressing escape.
   *
   * Hide a toggable element when escape is pressed and the focus is on it
   * or on its toggler.
   *
   * This is to meet the WCAG 2.1 1.4.13: Content on Hover or Focus
   * criterion.
   *
   * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html
   */
  function handleEscape(event) {
    var key = event.which || event.keyCode;
    // Escape.
    if (key === 27) {
      var target = event.currentTarget;
      // Toggable element, get the toggling button.
      if (!target.hasAttribute('data-cd-toggler')) {
        target = target.previousElementSibling;
      }
      // Focus the button and hide the content.
      if (target && target.hasAttribute('data-cd-toggler')) {
        target.focus();
        toggle(target, true);
      }
    }
  }

  /**
   * Handle global clicks outside of toggable elements, close them in this
   * case.
   */
  function handleClickAway(event) {
    var target = event.target;
    if (target) {
      if (target.nodeName === 'A' && !target.hasAttribute('data-cd-toggler')) {
        collapseAll();
      }
      else {
        // Loop until we find a parent which is a toggable or toggler element
        // or we reach the "context" element.
        while (target && target !== document) {
          if (target.hasAttribute) {
            // Skip if the clicked element belong to a toggler or a toggable
            // element.
            if (target.hasAttribute('data-cd-toggler') || target.hasAttribute('data-cd-toggable')) {
              return;
            }
          }
          target = target.parentNode;
        }
      }
      collapseAll();
    }
  }

  /**
   * Update the toggable elements when the window is resized.
   */
  function handleResize(selector) {
    var elements = document.querySelectorAll('[data-cd-toggable]');
    for (var i = 0, l = elements.length; i < l; i++) {
      updateToggable(elements[i]);
    }
  }

  /**
   * Create a svg icon.
   */
  function createIcon(name, component, wrap) {
    var svgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    var useElem = document.createElementNS('http://www.w3.org/2000/svg', 'use');
    useElem.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#cd-icon--' + name);
    svgElem.setAttribute('class', 'cd-icon cd-icon--' + name);
    svgElem.setAttribute('width', '16');
    svgElem.setAttribute('height', '16');
    svgElem.setAttribute('aria-hidden', 'true');
    svgElem.setAttribute('focusable', 'false');

    svgElem.appendChild(useElem);

    if (component && wrap) {
      var wrapper = document.createElement('span');
      wrapper.setAttribute('class', component + '__logo');
      wrapper.appendChild(svgElem);
      return wrapper;
    }
    return svgElem;
  }

  /**
   * Create a button to toggle a dropdown.
   */
  function createButton(element) {
    var id = element.getAttribute('id');
    var label = element.getAttribute('data-cd-toggable');
    var logo = element.getAttribute('data-cd-logo');
    var icon = element.getAttribute('data-cd-icon');
    var component = element.getAttribute('data-cd-component');

    // Create the button.
    var button = document.createElement('button');
    button.setAttribute('type', 'button');

    // ID.
    button.setAttribute('id', id + '-toggler');

    // @todo rename logo/icon to be more inclusive if needed.
    //  Eg. prefix/suffix or pre/post
    // Pre-label SVG icon.
    if (logo) {
      button.appendChild(createIcon(logo, component, true));
    }

    // Button label.
    var labelWrapper = document.createElement('span');
    labelWrapper.appendChild(document.createTextNode(label));
    button.appendChild(labelWrapper);

    // Post-label SVG icon.
    if (icon) {
      // @todo This could default to dropdown arrow icon.
      button.appendChild(createIcon(icon));
    }

    // BEM for class selectors.
    if (component) {
      button.setAttribute('class', component + '__btn');
      labelWrapper.setAttribute('class', component + '__btn-label');
    }

    // Do not collapse the dropdown when clicking outside.
    if (element.hasAttribute('data-cd-toggable-keep')) {
      button.setAttribute('data-cd-toggable-keep', '');
    }

    // Alternate label for when the button is expanded.
    if (element.hasAttribute('data-cd-toggable-expanded')) {
      labelWrapper.setAttribute('data-cd-label-switch', element.getAttribute('data-cd-toggable-expanded'));
    }

    return button;
  }

  /**
   * Transform the element into a dropdown menu.
   */
  function setToggable(element) {
    var toggler = element.previousElementSibling;

    // Skip if the toggler is not a button or has already been processed.
    if (toggler) {
      // Togglers should be buttons to avoid mis-processing elements
      // appearing before the toggable element. There is still a risk of
      // mis-processing if, for whatever reason, there is a button which is
      // not the toggler before the toggable element.
      if (toggler.nodeName !== 'BUTTON') {
        return;
      }
      // We assume that if a button has the "data-cd-toggler" attribute then
      // it has been processed by the "setToggable" function. That means
      // this attribute should not be used directly in the markup otherwise
      // the toggable element will not be processed by this script and event
      // handlers will not be attached.
      if (toggler.hasAttribute('data-cd-toggler')) {
        return;
      }
    }
    // Create a button to toggle the element.
    else {
      toggler = createButton(element);
    }

    // Flag to indicate that the toggable element is initially expanded.
    var expand = element.hasAttribute('data-cd-toggable-expand') || false;

    // Set the toggling attributes of the toggler.
    toggler.setAttribute('data-cd-toggler', '');
    toggler.setAttribute('aria-expanded', expand !== false);
    toggler.setAttribute('aria-haspopup', true);

    // For better conformance with the aria specs though it doesn't do
    // much in most screen reader right now (2020/01), we had the
    // `aria-controls` attribute.
    //
    // @todo generate an id for the toggable element if it has none?
    if (element.hasAttribute('id')) {
      toggler.setAttribute('aria-controls', element.getAttribute('id'));
    }

    // Add toggling function.
    toggler.addEventListener('click', handleToggle);

    // Collapse when pressing scape.
    toggler.addEventListener('keydown', handleEscape);
    element.addEventListener('keydown', handleEscape);

    // Mark the element as toggable so that it can be handled properly
    // by the global click handler.
    if (!element.hasAttribute('data-cd-toggable')) {
      element.setAttribute('data-cd-toggable', '');
    }

    // Hide the element.
    element.setAttribute('data-cd-hidden', expand === false);

    // Add the toggler before the toggable element if not already.
    if (element.previousElementSibling !== toggler) {
      element.parentNode.insertBefore(toggler, element);
    }
  }

  /**
   * Remove the element's toggler.
   */
  function unsetToggable(element) {
    var toggler = element.previousElementSibling;
    if (toggler && toggler.hasAttribute('data-cd-toggler')) {
      // Remove event handler to avoid leaking.
      toggler.addEventListener('click', handleToggle);
      toggler.addEventListener('keydown', handleEscape);
      element.addEventListener('keydown', handleEscape);

      // Delete toggling button.
      toggler.parentNode.removeChild(toggler);

      // Reset attributes on the toggable element.
      element.removeEventListener('keydown', handleEscape);
      element.removeAttribute('data-cd-hidden');
    }
  }

  /**
   * Update a toggable element, setting or removing the toggling button and
   * attributes depending on the `dropdown` css property. When set to false
   * we remove the toggler and reset the toggable attributes so that the HTML
   * markup reflects the current behavior of the element.
   */
  function updateToggable(element) {
    if (window.getComputedStyle(element, null).getPropertyValue('--dropdown') === 'false') {
      unsetToggable(element);
    }
    else {
      setToggable(element);
    }
  }

  /**
   * Initialize the toggable menus, adding a toggle button and event
   * handling.
   */
  function initializeToggables() {
    // Collapse dropdowns when clicking outside of the toggable target.
    document.addEventListener('click', handleClickAway);

    // Loop through the toggable elements and set/unset the toggling button
    // depending on the screen size.
    window.addEventListener('resize', handleResize);

    // Initial setup.
    handleResize();
  }

  // Define OCHA Services elements
  var ochaButton = document.querySelector('#cd-ocha-dropdown-toggler');
  // Listen for interaction with OCHA Services menu
  ochaButton.addEventListener('click', function toggleDropdown() {
    if (ochaButton.getAttribute('aria-expanded') === 'true') {
      ga('send', 'event', 'Auth', 'OCHA Services', 'Close');
    } else {
      ga('send', 'event', 'Auth', 'OCHA Services', 'Open');
    }
  });

  // Define Login element
  var loginLink = document.querySelector('.login-link');

  // Listen for interaction with Login link
  if(loginLink) {
    loginLink.addEventListener('click', function(ev) {
      // Prevent full-page refresh
      ev.preventDefault();

      // Focus on email input
      var emailInput = document.querySelector('#email');
      emailInput.focus();
    });
  }
}());
</script>
